1) Kakva je razlika između JDK, JRE i JVM?

	JVM
	JVM je skraćenica za Java Virtual Machine, to je apstraktna mašina koja obezbeđuje radno okruženje u kojem se može izvršiti java bitecode. To je specifikacija.
	JVM su dostupni za mnoge hardverske i softverske platforme (tako da JVM zavisi od platforme).

	JRE
	JRE označava Java Runtime Environment. To je implementacija JVM-a.

	JDK
	JDK je akronim za Java Development Kit. To fizički postoji. Sadrži JRE + razvojne alate.

2) Koliko vrsta memorijskih područja dodeljuje JVM?

	Mnogi tipovi:
		Klasa (metoda) područja
		Gomila
		Stek
		Registar programa programa
		Native Method Stack

3) Šta je JIT kompajler?

	Just-In-Time (JIT) kompajler: Koristi se za poboljšanje performansi. JIT sastavlja delove bajtnog koda koji imaju istu funkcionalnost istovremeno, 
	a samim tim i smanjuje količinu vremena potrebnog za kompilaciju. Tu se termin "kompajler" odnosi na prevoditelja iz skupa instrukcija Java virtualne 
	mašine (JVM) do Set instrukcija određenog CPU-a.

4) Šta je platforma?

	Platforma je u osnovi hardversko ili softversko okruženje u kojem se program pokreće. Postoje dve vrste platformi zasnovanih na softveru i na hardveru. 
	Java nudi platformu zasnovanu na softveru.

5) Koja je glavna razlika između Java platforme i drugih platformi?

	Java platforma se razlikuje od većine drugih platformi u smislu da je platforma bazirana na softveru koja radi na drugim platformama zasnovanim na hardveru. 
	Ima dve komponente:
		Runtime Environment
		API (interfejs za programiranje aplikacija)

6) Šta Java daje svojoj "pisanju jednom i trčati bilo gdje" prirodu?

	Bitecode. Java je sastavljen da bude bajtni kod koji je posrednički jezik između izvornog koda i kodnog uređaja. 
	Ovaj bajtni kod nije specifičan za platformu i stoga se može dovesti do bilo koje platforme.

7) Šta je classloader?

	Classloader je podsistem JVM-a koji se koristi za učitavanje klasa i interfejsa. Postoji mnogo vrsta klasa klonova, npr. Bootstrap classloader, Ektension classloader, Sistem classloader, Plugin classloader itd.

8) Da li je Empti .java ime datoteke ispravno ime izvorne datoteke?

	Da, sačuvajte java datoteku samo od .java, kompajlirajte ga javac .java i pokrenite od strane java iourclassname Hajde da napravimo jedan jednostavan primer:

		// sačuvati samo .java
		Klasa A {
		Public static void main (String args []) {
		Sistem.out.println ("Zdravo java");
		}
		}
		// compile bi javac .java
		// pokreće java A
		Napravite ga javac .java

		Pokrenite ga java A

9) Da li je ključna reč za brisanje, sledeću, glavnu, izlaznu ili nulu u Java-u?

	Ne.

10) Ako u komandnoj liniji ne navedem nikakve argumente, onda je String niz glavnog metoda prazan ili null?

	To je prazno. Ali ne nula.

11) Šta ako napišem statičku javnu prazninu umesto javnu statičku prazninu?

	Program kompajlira i radi pravilno.

12) Koja je podrazumevana vrednost lokalnih varijabli?

	Lokalne varijable se ne inicijaliziraju na bilo koju podrazumevanu vrednost, niti primitivne niti reference objekata.
	Core Java - OOPs Concepts: Initial OOPs Intervju pitanja
	Dato je više od 50 OOP-ova (Object-Oriented Programming and Sistem) pitanja za intervju. Ali, 
	oni su kategorizirani u mnogim odeljcima kao što su pitanja konstruktora intervjua, 
	pitanja statičkog intervjua, pitanja vezana za nasljeđivanje, pitanje ispitivanja apstrakcije, 
	pitanja vezana za polimorfizam itd. Za bolje razumevanje.

13) Šta je razlika između objektno orijentisanog programskog jezika i jezičkog programskog jezika?

	Programski jezici zasnovani na objektima prate sve funkcije OOP-a osim Dedovanje. Primeri jezičkih programskih jezika su JavaScript, VBScript itd.

14) Koja će biti početna vrijednost reference objekta koja je definirana kao varijabla instance?

	Reference objekata su inicijalizovane do nula u Java-u.
	Core Java - OOPs Concepts: Konstruktor Intervju Pitanja

15) Šta je konstruktor?

	Konstruktor je baš kao metoda koja se koristi za inicijalizaciju stanja objekta. Poziva se u trenutku stvaranja objekta.

16) Koja je svrha podrazumevanog konstruktora?

	Podrazumevani konstruktor daje objektima podrazumevane vrednosti. Java kompajler kreira podrazumevani konstruktor samo ako u klasi ne postoji konstruktor.više detalja ...

17) Da li konstruktor vrati svaku vrijednost?

	Da, to je trenutna instanca (ne možete koristiti povratni tip, ali ona vraća vrijednost). Više detalja ...

18) Da li je konstruktor nasleden?

	Ne, konstruktor nije nasledio.

19) Možete li učiniti konačnog konstruktora?

	Ne, konstruktor ne može biti konačan.
	Core Java - OOPs Concepts: Pitanja za intervenciju statične ključne reči

20) Šta je statička promenljiva?

	Statička varijabla se koristi za upućivanje zajedničke svojine svih objekata (što nije jedinstveno za svaki objekt), 
	npr. Naziv preduzeća zaposlenih, koledž učenika itd.
	Statička varijabla dobija memoriju samo jednom u području klase u vrijeme učitavanja klase.

21) Šta je statična metoda?

	Statička metoda pripada klasi a ne objektu klase.
	Statička metoda se može pozvati bez potrebe za stvaranjem instance klase.
	Statička metoda može pristupiti statičkom članu podataka i može promeniti vrijednost.

22) Zašto je glavni metod statičan?

	Zato što objekt nije obavezan da pozove statičku metodu ako je to bio ne-statički metod, onda bi jvm tvorio objekat prvo pozvati glavnu () metodu koja će dovesti do problema dodatnog dodjeljivanja memorije.više detalja ...

23) Šta je statični blok?

	Koristi se za inicijalizaciju člana statičkih podataka.
	Isključuje se pre glavne metode u vreme klasnog opterećenja.

24) Možemo li izvršiti program bez main () metode?

	Da, jedan od načina je statični blok.više detalja ...

25) Šta ako se statički modifikator ukloni iz potpisa glavne metode?

	Program sastavlja. Ali u toku izvršavanja baca grešku "NoSuchMethodError".

26) Šta je razlika između statičke (klasne) metode i instance?

	Metod statičke ili klasne metode
		1) Metoda, odnosno deklarisana kao statična, poznata je kao statička metoda. Metoda, odnosno ne deklarisana kao statična, poznata je kao metoda instance.
		2) Objekat nije obavezan da pozove statičku metodu. Objekat je potreban za pozivanje metoda instance.
		3) Nepatični članovi (instanca) ne mogu se pristupiti u statičkom kontekstu (statička metoda, statički blok i statička ugrađena klasa) direktno. Statičke i ne-statičke varijable oba se mogu pristupiti metodama instanca.
		4) Na primer: javna statička int kocka (int n) {povratak n * n * n;} Na primjer: javni void msg () {...}.
	Core Java - OOPs Concepts: Pitanja za interakciju sa nasleđivanjem

27) Šta je ovo u Java-u?

	To je ključna reč koja se odnosi na trenutni object.more detalji ...

28) Šta je nasledstvo?

	Nasleđivanje je mehanizam u kojem jedan objekat stiče sva svojstva i ponašanje drugog objekta druge klase. Predstavlja odnos IS-A. Koristi se za ponovljivost kodiranja i preklapanje metoda.

29) Koja klasa je superclass za svaku klasu.

	Klasa predmeta.

30) Zašto višestruko nasleđe nije podržano u Java-u?

	Da biste smanjili složenost i pojednostavili jezik, višestruko nasleđe nije podržano u Java u slučaju klase.

31) Šta je kompozicija?

	Držanje referencije druge klase unutar neke druge klase je poznato kao sastav.

32) Koja je razlika između agregacije i sastava?

	Agregacija predstavlja slabu vezu, a sastav predstavlja jak odnos. Na primer: na bicikl ima indikator (agregacija), ali motor ima motor (kompost).

33) Zašto Java ne podržava pokazivače?

	Pointer je varijabla koja se odnosi na memorijsku adresu. Oni se ne koriste u Java-u jer su nebezbedni (neosigurani) i složeni za razumevanje.

34) Šta je super u Java?

	To je ključna riječ koja se odnosi na neposredni predmet razreda object.more ...

35) Možete li koristiti ovaj () i super () oba u konstruktoru?

	Ne. Zato što super () ili ovo () mora biti prva izjava.

36) Šta je kloniranje objekta?

	Kloniranje objekta koristi se za kreiranje tačne kopije objekta. Detaljnije...

Core Java - OOPs Concepts: Pitanja za preopterećenje metode

37) Šta je preopterećenje metoda?

	Ako klasa ima više metoda po istom imenu ali različitim parametrima, ona je poznata kao Preopterećenje metode. Povećava čitljivost programa.

38) Zašto preopterećenje metoda nije moguće promenom vrste povratka u Java?

	Zbog nejasnoće.

39) Možemo li preoptereti glavni () metod?

	Da, u klasi možete imati mnoge glavne () metode preopterećenjem glavne metode.
	Core Java - OOPs Concepts: pitanja koja preovlađuju Intervju

40) Šta je prevladavajući metod:

	Ako podklasa pruža specifičnu primenu metode koja je već obezbijeđena od strane njegove roditeljske klase, 
	poznata je kao Preimućivanje metode. Koristi se za polimorfizam runtime-a i da pruži specifičnu primjenu metoda.
	
41) Možemo li zameniti statičku metodu?

	Ne, ne možete prevazići statičku metodu jer su oni deo klase koji nije predmet.

42) Zašto ne možemo prevazići statičku metodu?

	To je zato što je statička metoda deo klase i vezana je za klase, dok je metoda instance vezana za objekat, a statička dobija memoriju u oblasti klase i instanca dobija memoriju u kupu.

43) Da li možemo prevazići preopterećenu metodu?

	Da.

44) Razlika između preopterećenja i preklapanja metode.

	Metod preopterećenja preopterećenja
		1) Preopterećenje metode povećava čitljivost programa. 
		   Preimenovanje metode obezbeđuje specifičnu primenu metode koja je već obezbedila njegova super klasa.
		2) preklapanje metoda se javlja unutar klase. Preimenovanje metode se javlja u dve klase koje imaju IS-A vezu.
		3) U ovom slučaju parametar mora biti drugačiji. U tom slučaju parametar mora biti isti.

45) Da li možete imati virtuelne funkcije u Java?

	Da, sve funkcije u Java su podrazumevane virtuelne.

46) Šta je kovarijantan povratni tip?

	Sada, od java5, moguće je preokrenuti bilo koji metod promenom tipa povratka ako je tip povratnog tipa metode preklase podklasa tip podklasa. 
	Poznat je kao kovarijantan povratni tip. Detaljnije...
	Core Java - OOPs Concepts: pitanja finalne ključne reči Intervju

47) Šta je konačna varijabla?

	Ako napravite bilo koju promenljivu kao konačnu, ne možete promeniti vrijednost konačne varijable (to će biti konstantno). Više detalja ...

48) Koja je konačna metoda?

	Konačne metode ne mogu se preklapati.više detalja ...

49) Šta je završna klasa?

	Konačna klasa se ne može naslediti. Detaljnije...

50) Koja je prazna krajnja varijabla?

	Konačna varijabla, koja nije inicijalizovana u vrijeme deklaracije, poznata je kao prazna finalna varijabla.više detalja ...

51) Možemo li intializovati praznu finalnu varijablu?

	Da, samo u konstruktoru ako nije statična. Ako je statična prazna krajnja varijabla, može se inicijalizirati samo u statičnom bloku.više detalja ...

52) Možete li proglasiti glavni metod konačnim?

	Da, kao što je javni statički final void main (String [] args) {}.